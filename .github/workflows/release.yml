name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.22

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build
      run: go build -v ./...

    - name: Determine version bump
      id: version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        major_pattern: "BREAKING CHANGE:|breaking:|major:"
        minor_pattern: "feat:|feature:|minor:"
        version_format: "${major}.${minor}.${patch}"
        search_commit_body: true
        user_format_type: "csv"

    - name: Create git tag
      if: steps.version.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
        git push origin v${{ steps.version.outputs.version }}

    - name: Generate changelog
      id: changelog
      if: steps.version.outputs.changed == 'true'
      run: |
        # Generate changelog from recent commits
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
        fi
        
        # Save changelog to output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      if: steps.version.outputs.changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          **Full Changelog**: https://github.com/tyrads-com/tyrads-go-sdk-iframe/compare/${{ steps.version.outputs.previous_version }}...v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

    - name: Update go.mod version
      if: steps.version.outputs.changed == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Updating go.mod with version: v$VERSION"
        
        # Update go.mod if it doesn't already have the version
        if ! grep -q "// v$VERSION" go.mod; then
          echo "" >> go.mod
          echo "// v$VERSION" >> go.mod
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add go.mod
          git commit -m "chore: update go.mod version to v$VERSION [skip ci]" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
        fi

